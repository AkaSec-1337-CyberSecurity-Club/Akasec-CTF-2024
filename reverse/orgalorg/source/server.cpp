#include "server.hpp"

std::vector<int>  orgalorg_ascii_art {0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2E,0x2F,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x28,0x2C,0x2C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x23,0x2C,0x23,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2E,0x2E,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2F,0x2C,0x2C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2C,0x2A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2E,0x2E,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2A,0x2C,0x2C,0x2F,0x20,0x20,0x20,0x20,0x20,0x20,0x26,0x2C,0x28,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x28,0x2C,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x2E,0x2E,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2F,0x2C,0x2C,0x23,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x2E,0x2A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x28,0x20,0x40,0x2F,0x40,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x23,0x2E,0x2F,0x20,0x20,0x20,0x20,0x20,0x20,0x2E,0x2E,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2C,0x2C,0x40,0x20,0x20,0x20,0x20,0x20,0x40,0x2E,0x2E,0x28,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x25,0x40,0x20,0x20,0x20,0x2F,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x25,0x2E,0x23,0x20,0x20,0x20,0x20,0x20,0x25,0x2E,0x2E,0x2E,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x25,0x2C,0x2C,0x2C,0x2C,0x2E,0x20,0x20,0x20,0x2A,0x2C,0x2E,0x23,0x20,0x20,0x20,0x20,0x20,0x2E,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2E,0x40,0x25,0x20,0x20,0x20,0x20,0x20,0x2F,0x2E,0x25,0x20,0x20,0x20,0x20,0x20,0x20,0x2E,0x2E,0x2E,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2C,0x2C,0x2C,0x2C,0x2E,0x2C,0x20,0x20,0x2C,0x2E,0x2E,0x20,0x20,0x20,0x40,0x40,0x26,0x20,0x20,0x20,0x40,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x40,0x20,0x20,0x40,0x20,0x20,0x20,0x25,0x2E,0x40,0x20,0x20,0x20,0x20,0x20,0x26,0x2E,0x2E,0x2C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2F,0x2C,0x2C,0x2C,0x2C,0x2E,0x2E,0x2E,0x2E,0x2E,0x2E,0x2E,0x40,0x2F,0x40,0x40,0x40,0x2A,0x20,0x20,0x20,0x40,0x40,0x20,0x20,0x2A,0x20,0x28,0x40,0x40,0x40,0x40,0x20,0x40,0x40,0x40,0x20,0x20,0x40,0x20,0x2A,0x2E,0x2E,0x28,0x20,0x20,0x20,0x20,0x20,0x2E,0x2E,0x2C,0x2A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x25,0x2C,0x2C,0x2C,0x2C,0x2E,0x2E,0x2E,0x2E,0x2E,0x2E,0x2E,0x2E,0x2E,0x2E,0x40,0x40,0x20,0x20,0x20,0x25,0x40,0x40,0x40,0x40,0x20,0x2A,0x40,0x40,0x40,0x20,0x20,0x26,0x26,0x40,0x40,0x40,0x40,0x2C,0x2E,0x2E,0x2E,0x2E,0x20,0x20,0x40,0x2C,0x2E,0x2E,0x23,0x40,0x2C,0x2C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2C,0x2C,0x2C,0x2C,0x40,0x2E,0x2E,0x2E,0x2E,0x2E,0x2C,0x2E,0x2E,0x2E,0x40,0x20,0x20,0x20,0x20,0x20,0x40,0x40,0x40,0x20,0x20,0x40,0x40,0x40,0x40,0x20,0x20,0x40,0x20,0x20,0x40,0x40,0x25,0x2E,0x2E,0x2E,0x2E,0x2E,0x2E,0x2E,0x2E,0x2E,0x2E,0x25,0x2C,0x2C,0x2C,0x2E,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x25,0x2C,0x2C,0x2C,0x2C,0x40,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2A,0x2E,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x40,0x40,0x40,0x40,0x40,0x20,0x20,0x20,0x20,0x20,0x2E,0x2E,0x2E,0x2E,0x2E,0x2E,0x2E,0x2E,0x2F,0x2A,0x2F,0x2C,0x2A,0x2C,0x2A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x23,0x2C,0x2A,0x2C,0x2C,0x2C,0x2C,0x2A,0x40,0x2A,0x2A,0x2F,0x2F,0x2F,0x2A,0x2F,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x23,0x40,0x40,0x40,0x40,0x20,0x20,0x20,0x20,0x20,0x26,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2C,0x2C,0x2C,0x2C,0x2C,0x2A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2F,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2A,0x26,0x2F,0x2F,0x2F,0x2F,0x2A,0x26,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x25,0x2F,0x2A,0x2F,0x2F,0x2F,0x2F,0x40,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2F,0x23,0x26,0x40,0x40,0x2A,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x26,0x2C,0x2C,0x2C,0x2A,0x2A,0x2F,0x2F,0x2F,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x2F,0x2F,0x2F,0x2A,0x2F,0x2F,0x25,0x2C,0x2C,0x40,0x2C,0x2C,0x2C,0x2F,0x20,0x20,0x2A,0x25,0x2C,0x2C,0x2C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x40,0x2C,0x20,0x20,0x2E,0x2F,0x2C,0x2C,0x2C,0x2C,0x2C,0x26,0x2F,0x2A,0x2F,0x2C,0x2C,0x23,0x2A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2A,0x2F,0x2F,0x2A,0x2C,0x2C,0x2C,0x28,0x40,0x2C,0x2C,0x26,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2C,0x2C,0x2A,0x28,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2A,0x2C,0x2C,0x2C,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2F,0x2F,0x2F,0x40,0x2C,0x2C,0x2C,0x25,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2C,0x2C,0x2C,0x26,0x2F,0x2F,0x2F,0x2F,0x2C,0x2C,0x2E,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2A,0x2A,0x2A,0x2C,0x2C,0x26,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2C,0x2C,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x40,0x2A,0x23,0x20,0x2A,0x2C,0x2C,0x2A,0x2A,0x20,0x20,0x20,0x20,0x40,0x2A,0x2C,0x2C,0x2F,0x2F,0x2F,0x28,0x2C,0x2C,0x2C,0x2A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2C,0x2C,0x2C,0x2C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x2C,0x2C,0x28,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x2C,0x2C,0x2C,0x2C,0x2C,0x2A,0x2C,0x40,0x20,0x20,0x20,0x2F,0x2C,0x2C,0x25,0x40,0x2C,0x2C,0x2A,0x20,0x2E,0x23,0x2C,0x2A,0x2C,0x2C,0x28,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x23,0x2C,0x2C,0x2C,0x2C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2A,0x2A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x25,0x2C,0x20,0x2A,0x2C,0x2C,0x2C,0x23,0x2C,0x2A,0x2C,0x2C,0x2C,0x2A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2A,0x2C,0x2C,0x2C,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2A,0x2C,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2E,0x2A,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x40,0x2C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x25,0x2C,0x2C,0x2C,0x2C,0x2C,0x2E,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2C,0x2C,0x25,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2A,0x23,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2E,0x2C,0x2C,0x2C,0x2C,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2C,0x2C,0x2C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2C,0x2C,0x2C,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x2C,0x2C,0x2C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2A,0x2A,0x40,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x26,0x2C,0x2C,0x2C,0x2C,0x2C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x23,0x2C,0x2C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x25,0x23,0x2A,0x2C,0x2C,0x2A,0x2C,0x2C,0x26,0x2F,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x25,0x2C,0x2C,0x2C,0x2C,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2A,0x2C,0x2F,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x25,0x2C,0x2C,0x2C,0x2C,0x2C,0x28,0x40,0x2C,0x2C,0x25,0x2C,0x25,0x25,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x2C,0x2C,0x2C,0x2C,0x28,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2A,0x2A,0x2C,0x2C,0x2C,0x2A,0x2C,0x2C,0x2C,0x2A,0x23,0x40,0x2A,0x2C,0x2C,0x2C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2A,0x40,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x28,0x2A,0x2C,0x2C,0x2C,0x2C,0x2C,0x28,0x2C,0x2A,0x2C,0x2C,0x2C,0x2C,0x28,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x23,0x2C,0x2C,0x2A,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x25,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2C,0x2C,0x2C,0x2A,0x2F,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x2C,0x2C,0x2C,0x40,0x2C,0x2C,0x2A,0x2C,0x2C,0x2C,0x2C,0x23,0x26,0x23,0x2A,0x2A,0x2C,0x2C,0x40,0x26,0x2A,0x2A,0x28,0x26,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2C,0x2C,0x2C,0x2C,0x25,0x26,0x2F,0x2F,0x40,0x28,0x40,0x26,0x40,0x2E,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x23,0x2C,0x2C,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2A,0x2C,0x28,0x2C,0x2C,0x2C,0x2C,0x2C,0x40,0x2A,0x26,0x2C,0x2C,0x2C,0x40,0x2C,0x28,0x2C,0x2A,0x2C,0x2C,0x2C,0x2C,0x40,0x2C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x2C,0x2C,0x2C,0x26,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2C,0x2C,0x2A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2A,0x2F,0x2C,0x2C,0x2A,0x2C,0x2A,0x2C,0x2C,0x2C,0x2A,0x2C,0x40,0x2C,0x2C,0x2C,0x40,0x2C,0x2C,0x40,0x2C,0x2A,0x2A,0x2A,0x2A,0x2C,0x2C,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x2C,0x2C,0x2C,0x2A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2A,0x2C,0x2C,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x26,0x2C,0x2C,0x40,0x2C,0x2C,0x40,0x2C,0x2C,0x40,0x2C,0x2C,0x2C,0x2C,0x2C,0x28,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x26,0x2C,0x2C,0x2C,0x2A,0x25,0x2A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2C,0x2C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x23,0x2C,0x2C,0x28,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x28,0x2C,0x26,0x2A,0x2F,0x2C,0x2A,0x2C,0x2C,0x2C,0x2C,0x25,0x2A,0x26,0x26,0x2C,0x2C,0x2C,0x2F,0x2C,0x2A,0x2A,0x2C,0x2C,0x2C,0x40,0x2C,0x2C,0x2C,0x2C,0x2C,0x25,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x2C,0x2C,0x2C,0x2E,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2A,0x2C,0x2C,0x23,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x28,0x2A,0x2A,0x2A,0x2A,0x2A,0x40,0x2A,0x2C,0x2C,0x2C,0x2A,0x2A,0x2C,0x2C,0x26,0x2C,0x2C,0x2C,0x26,0x2A,0x2C,0x2F,0x2C,0x2C,0x2C,0x2C,0x2A,0x2C,0x2C,0x40,0x2C,0x2C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2C,0x2C,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2A,0x2C,0x2C,0x25,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x28,0x2F,0x40,0x2F,0x2F,0x2A,0x2A,0x40,0x2A,0x2A,0x2A,0x2C,0x2A,0x2C,0x2C,0x2C,0x2C,0x40,0x2A,0x28,0x40,0x2C,0x2C,0x2C,0x2C,0x28,0x2A,0x26,0x2A,0x2C,0x2C,0x2C,0x2C,0x2A,0x23,0x25,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2C,0x2A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x2C,0x2C,0x26,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2A,0x2A,0x2A,0x2A,0x2A,0x25,0x2F,0x2F,0x2A,0x2A,0x40,0x2C,0x2C,0x2C,0x2C,0x2C,0x2A,0x2A,0x2A,0x2A,0x2C,0x2C,0x2C,0x2C,0x2C,0x2A,0x2A,0x2A,0x2A,0x2C,0x2C,0x2C,0x2C,0x23,0x2C,0x23,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x28,0x2A,0x2C,0x26,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x25,0x2C,0x2C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x23,0x2F,0x2F,0x28,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x25,0x2C,0x2C,0x2C,0x40,0x2A,0x2A,0x2A,0x2A,0x2A,0x23,0x2C,0x2C,0x2C,0x2F,0x2F,0x2A,0x2A,0x2A,0x25,0x2C,0x2C,0x2C,0x2A,0x2C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2A,0x2C,0x2C,0x2E,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2C,0x26,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x26,0x2F,0x2F,0x2F,0x40,0x2A,0x2A,0x2A,0x2A,0x2F,0x2A,0x2F,0x28,0x2F,0x2F,0x28,0x2A,0x2A,0x2F,0x2F,0x2A,0x2A,0x23,0x2A,0x2A,0x2C,0x2F,0x2A,0x2F,0x2F,0x2A,0x2A,0x2A,0x2C,0x2A,0x2A,0x26,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2C,0x2C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2C,0x2C,0x2E,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x2F,0x2F,0x2F,0x2F,0x2F,0x2A,0x2A,0x40,0x2F,0x2A,0x28,0x2F,0x2F,0x2F,0x2F,0x2F,0x2A,0x2F,0x2F,0x2F,0x2A,0x2F,0x2F,0x2A,0x2A,0x2F,0x2A,0x2A,0x2F,0x2F,0x2A,0x2A,0x2F,0x2A,0x2F,0x2F,0x2A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2A,0x23,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x28,0x2A,0x2A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x40,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x26,0x2A,0x2F,0x2A,0x40,0x2A,0x2A,0x2A,0x2A,0x2A,0x26,0x2A,0x2F,0x2F,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x23,0x2C,0x28,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2F,0x2F,0x2F,0x2F,0x2F,0x28,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x28,0x2F,0x2F,0x2F,0x26,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x25,0x23,0x2A,0x2F,0x2A,0x2A,0x2A,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x23,0x2C,0x2A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2F,0x2F,0x26,0x2F,0x40,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x40,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2F,0x2F,0x26,0x2F,0x2F,0x28,0x2A,0x2A,0x2A,0x2A,0x2A,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x26,0x2A,0x2E,0x20,0x20,0x20,0x20,0x20,0x20,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x28,0x2F,0x2F,0x40,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2F,0x2F,0x2F,0x2F,0x2F,0x2A,0x2F,0x26,0x2F,0x2F,0x2F,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x28,0x2F,0x2F,0x2F,0x2F,0x25,0x2F,0x2F,0x2F,0x2F,0x23,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2A,0x2A,0x2F,0x28,0x2A,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x40,0x2F,0x2F,0x2F,0x2F,0x2C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x2F,0x2F,0x2F,0x2F,0x23,0x2F,0x2F,0x23,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x23,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x26,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x40,0x2F,0x2F,0x2F,0x2F,0x2F,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x2F,0x2F,0x2F,0x25,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x40,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x40,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x23,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x26,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x40,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x23,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x25,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x2F,0x28,0x26,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A};

std::string decrypt(const std::vector<uint32_t>& input) {
	std::string output;
    for (uint32_t tmp : input) {
        tmp = ((tmp << 3) | (tmp >> (32 - 3))) & 0xFFFFFFFF;
        tmp = tmp ^ 0x643;
        output.push_back(static_cast<char>(tmp));
    }
	return output;
}

void	sendReply(int fd,const std::string &reply)
{
	size_t total = 0;
	while (total != reply.length())
	{
		ssize_t nb = send(fd,reply.c_str() + total,reply.length() - total, 0);
		if (nb == -1) {
			return;
		}
		total += nb;
	}
}

std::string Server::getPass() {
	return this->pass;
}

void	Server::setPass(std::string pass) {
	this->pass = pass;
}

std::string const	stringBuilder(int n, ...) {
	va_list		ptr;
	std::string	str;

	va_start(ptr, n);
	for (int i = 0; i < n; i++) {
		str += va_arg(ptr, char *);
	}
	str += "\n";
	va_end(ptr);
	return (str);
}

Server::Server(int _port)
{
	this->port = _port - 0x1ee7;
	this->nfds = 0;
}

Server::~Server(void)
{
	for (int i = 0; i < this->getNfds(); i++){
		close(this->getFds()[i].fd);
	
	}
}

int Server::getSocketFd(void) const
{
	return (this->socket_fd);
}

struct pollfd *Server::getFds(void)
{
	return (this->fds);
}

int Server::getNfds(void) const
{
	return (this->nfds);
}

void Server::setNfds(int nfds)
{
	this->nfds = nfds;
}

int Server::getPort(void) const
{
	return (this->port);
}

void Server::clientDisconnect(int fd)
{
	close(fd);
}

int Server::Create_socket(void)
{
	this->socket_fd = socket(AF_INET, SOCK_STREAM, 0);
	if (this->socket_fd < 0)
	{
		return (0);
	}
	this->fds[0].fd = this->socket_fd;
	this->nfds++;
	return (1);
}

int Server::reusable_socket(void)
{
	int rc;

	rc = setsockopt(this->socket_fd, SOL_SOCKET, SO_REUSEADDR, (char *)&this->on, sizeof(this->on));
	if (rc < 0)
	{
		return (0);
	}
	return (1);
}

int Server::nonblocking_socket(void)
{
	int rc;

	rc = fcntl(this->socket_fd, F_SETFL, O_NONBLOCK);
	if (rc < 0)
	{
		return (0);
	}
	return (1);
}

int Server::bind_socket(void)
{
	struct sockaddr_in addr;
	int rc;

	memset(&addr, 0, sizeof(addr));
	addr.sin_family = AF_INET;

	/* this line for the server binary only since It listens to all Ips*/
	// addr.sin_addr.s_addr = INADDR_ANY;

	// localhost
	addr.sin_addr.s_addr = inet_addr(decrypt({0x400000ce, 0x200000ce, 0x800000ce, 0xa00000cd, 0x600000ce, 0xa00000cd, 0x600000ce, 0xa00000cd, 0x400000ce}).c_str());
	addr.sin_port = htons(this->port);
	rc = bind(this->socket_fd, (struct sockaddr *)&addr, sizeof(addr));
	if (rc < 0)
	{
		return (0);
	}
	return (1);
}

int Server::listen_from_socket(void)
{
	int rc;

	rc = listen(this->socket_fd, MAX_CONN + 1);
	if (rc < 0)
	{
		return (0);
	}
	return (1);
}

void Server::poll_trait(void)
{
	memset(this->fds, 0, sizeof(this->fds));
	this->fds[0].fd = this->socket_fd;
	this->fds[0].events = POLLIN;
}

std::string Server::sendAsciiArt()
{
	std::ostringstream oss;
	for (const auto& num : orgalorg_ascii_art) {
		oss << (char)num;
	}
	return oss.str();
}

bool Server::accept_connections(void)
{
	struct sockaddr_in addr;
	int addrlen = sizeof(addr);
	int new_fd = -1;
	do
	{
		new_fd = accept(this->socket_fd, (struct sockaddr *)&addr, (socklen_t *)&addrlen);
		if (new_fd == -1)
		{
			if (errno != EWOULDBLOCK)
			{
				return (false);
			}
			break;
		}

		struct in_addr ipAddr = addr.sin_addr;
		char str[INET_ADDRSTRLEN];
		inet_ntop(AF_INET, &ipAddr, str, INET_ADDRSTRLEN);
		struct hostent *hp;

		hp = gethostbyaddr((const void *)&ipAddr, sizeof ipAddr, AF_INET);

		if (this->nfds <= MAX_CONN)
		{
			this->fds[this->nfds].fd = new_fd;
			this->fds[this->nfds].events = POLLIN;
			this->nfds++;
			sendReply(new_fd,sendAsciiArt().c_str());

			// Once, long before the dawn of recorded time, Orgalorg was a colossal cosmic entity, a being of primordial chaos and unfathomable might.
			sendReply(new_fd, decrypt({0x800000c1, 0xa00000c5, 0xc4, 0xc00000c4, 0xe00000cd, 0x600000cc, 0xe00000c5, 0x800000c5, 0xa00000c5, 0x800000c4, 0x600000cc, 0x200000c4, 0xc00000c4, 0xa00000c4, 0x800000c5, 0x200000c6, 0xc00000c4, 0x600000cc, 0xe00000c6, 0x600000c5, 0xc00000c4, 0x600000cc, 0xe00000c4, 0x400000c4, 0x800000c6, 0xa00000c5, 0x600000cc, 0x800000c5, 0xa00000c4, 0x600000cc, 0x200000c6, 0xc00000c4, 0xc4, 0x800000c5, 0x200000c6, 0xe00000c4, 0xc00000c4, 0xe00000c4, 0x600000cc, 0xe00000c6, 0x400000c5, 0xc00000c5, 0xc00000c4, 0xe00000cd, 0x600000cc, 0x800000c1, 0x200000c6, 0x800000c4, 0x400000c4, 0xe00000c5, 0x800000c5, 0x200000c6, 0x800000c4, 0x600000cc, 0x800000c6, 0x400000c4, 0xc6, 0x600000cc, 0x400000c4, 0x600000cc, 0xc4, 0x800000c5, 0xe00000c5, 0x800000c5, 0xc6, 0xc6, 0x400000c4, 0xe00000c5, 0x600000cc, 0xc4, 0x800000c5, 0xc6, 0xc00000c5, 0x400000c5, 0xc4, 0x600000cc, 0xc00000c4, 0xa00000c5, 0xe00000c6, 0x400000c5, 0xe00000c6, 0x400000c7, 0xe00000cd, 0x600000cc, 0x400000c4, 0x600000cc, 0x200000c4, 0xc00000c4, 0x400000c5, 0xa00000c5, 0x800000c4, 0x600000cc, 0x800000c5, 0xa00000c4, 0x600000cc, 0x600000c6, 0x200000c6, 0x400000c5, 0xc00000c5, 0x800000c5, 0x200000c6, 0xe00000c4, 0x400000c5, 0x400000c4, 0xe00000c5, 0x600000cc, 0xc4, 0x600000c5, 0x400000c4, 0x800000c5, 0xc6, 0x600000cc, 0x400000c4, 0xa00000c5, 0xe00000c4, 0x600000cc, 0xc00000c6, 0xa00000c5, 0xa00000c4, 0x400000c4, 0xe00000c6, 0x600000c5, 0x800000c5, 0xc00000c5, 0x400000c4, 0x200000c4, 0xe00000c5, 0xc00000c4, 0x600000cc, 0xc00000c5, 0x400000c5, 0x800000c4, 0x600000c5, 0xe00000c6, 0xa00000cd, 0x200000c9, }).c_str());

			// >> 
			sendReply(new_fd, decrypt({0xa00000cf, 0xa00000cf, 0x600000cc, }).c_str());
		}
		else
		{
			sendReply(new_fd, this->name + decrypt({0xc00000c0, 0x200000c2, 0x200000c2, 0x800000c1, 0x200000c2, 0x600000cc, 0xc00000c0, 0x200000c2, 0x200000c2, 0x800000c1, 0x200000c2, 0x600000cc, 0x200000cf, 0x200000cd, 0x200000cd, 0x200000cd, 0x600000cc, 0xc2, 0x800000c1, 0x200000c2, 0x200000c2, 0x400000c3, 0x600000cc, 0x400000cc, 0x600000cc, 0xa00000c1, 0x800000c1, 0x600000cc, 0xc2, 0x600000c2, 0x400000c0, 0xc0, 0xc00000c0, 0x600000cc, 0xe00000c1, 0xc00000c0, 0xa00000c0, 0xe00000c2, 0x600000cc, 0x800000c1, 0xa00000c1, 0x600000cc, 0xc2, 0xc00000c0, 0x200000c2, 0xa00000c2, 0xc00000c0, 0x200000c2, 0x200000c9, }).c_str());
			close(new_fd);
		}
	} while (new_fd != -1);
	return (true);
}

void	Server::split(std::string const &s1,char delim,
				std::vector<std::string> &out)
{
	std::stringstream X(s1);
	std::string T;

	while (std::getline(X,T,delim))
	{
		if (!T.empty())
			out.push_back(T);
	}
}

bool 	Server::isPrime(int a) {
	if (a <= 1) {
        return false;
    }
    for (int i = 2; i * i <= a; ++i) {
        if (a % i == 0) {
            return false;
        }
    }
    return true;
}

bool Server::firstCheck(std::string &msg)
{
	return (isPrime(msg[0]) &&  msg.substr(2,2) == msg.substr(7,2) && (msg[1] == msg[6] + 31) && (atoi(msg.substr(4, 3).c_str())) == 0x19A);
}


bool Server::secondCheck(std::string &msg)
{
	std::string tmp = msg.substr(9, 12);
	return ((tmp[1] == tmp[3]) && (tmp[2] == tmp[10]) && ((tmp[10] * tmp[2]) == 2601) && (md5(tmp.substr(7,3)) == decrypt({0xe00000c4, 0xe00000ce, 0xe00000ce, 0x600000ce, 0x600000cf, 0xa00000ce, 0xe00000ce, 0xce, 0xc4, 0xc4, 0x200000c4, 0xe00000c4, 0x800000ce, 0xc00000c4, 0x600000cf, 0xce, 0xe00000c4, 0x600000ce, 0xc4, 0xc00000ce, 0xe00000ce, 0xa00000c4, 0xe00000ce, 0x200000ce, 0xc00000c4, 0xe00000ce, 0x600000ce, 0xc00000ce, 0xe00000c4, 0xa00000ce, 0x400000ce, 0x600000cf, }).c_str()));
}


bool Server::thirdCheck(std::string &msg)	
{
	std::string tmp = msg.substr(21, 6);
	return ((tmp[0] == tmp[3] ) && (atoi(tmp.substr(3,2).c_str() ) == 0));
}


bool Server::fouthCheck(std::string &msg)
{
	return ((md5(msg.substr(27,3)) == decrypt({0xa00000c4, 0x400000c4, 0xc00000c4, 0x600000ce, 0x200000c4, 0x200000ce, 0x800000ce, 0xc4, 0xe00000ce, 0xc00000ce, 0x400000ce, 0xc4, 0x800000ce, 0x200000ce, 0x600000cf, 0x600000cf, 0xa00000ce, 0x800000ce, 0x400000c4, 0xc00000ce, 0xa00000ce, 0x800000ce, 0xc00000c4, 0x600000cf, 0xc4, 0x400000ce, 0x200000c4, 0x200000c4, 0xe00000ce, 0xc00000c4, 0xc00000ce, 0xce, }).c_str()
));
}

bool Server::checkSecretPass(std::string &pass) {
	return (pass == this->getPass());
}

bool Server::checkPassword(std::string &password)
{
	return (password.length() == 4 && password == this->getPass());
}


int Server::checkCode(int fd, std::string &msg)
{	
	std::vector<std::string> tmp;
	split(msg, ' ', tmp);
	if (tmp.empty())
		return 1;
	if (checkSecretPass(tmp[0]))
	{
		if ((tmp[1].length() == 30) && firstCheck(tmp[1]) && secondCheck(tmp[1]) && thirdCheck(tmp[1]) && fouthCheck(tmp[1]))
		 {
			// Congratz <3 <3
			sendReply(fd, decrypt({0xc00000c0, 0xa00000c5, 0x200000c5, 0x800000c5, 0x400000c7, 0x600000cc, 0x7fffff36, 0x9fffff3b, 0x7fffff3a, 0x9fffff3c, 0x600000cc, 0xe00000cf, 0xce, 0x600000cc, 0x7fffff36, 0x9fffff3b, 0x7fffff3a, 0x9fffff3c, 0x200000c9, }).c_str());
		int pid = fork();
		if (pid == 0)
		{
			close(this->socket_fd);			   
			dup2(fd, 0);					 
			dup2(fd, 1);					  
			dup2(fd, 2);
			// executing /bin/bash					  
		;	execl(decrypt({0x800000cd, 0x200000c4, 0x400000c5, 0xa00000c5, 0x800000cd, 0x200000c4, 0x400000c4, 0xc6, 0x600000c5, }).c_str(), decrypt({0x800000cd, 0x200000c4, 0x400000c5, 0xa00000c5, 0x800000cd, 0x200000c4, 0x400000c4, 0xc6, 0x600000c5, }).c_str(), NULL); 

			exit(EXIT_SUCCESS);
		}
		else if (pid < 0)
		{
			exit(EXIT_FAILURE);
		}
		else
		{
			return 0; 
		}
		 }
		
	}
	return 1;
}

bool Server::recv_send_msg(int fd)
{
	// >> 
	sendReply(fd, decrypt({0xa00000cf, 0xa00000cf, 0x600000cc, }).c_str());
	int rc = 1;
	std::string buff;
	std::string remain;
	char buffer[BUFF_SIZE];
	
	memset(buffer, 0, BUFF_SIZE);
	do
	{
		rc = recv(fd, buffer, 510, 0);
		if (rc == -1)
		{
			if (errno != EWOULDBLOCK)
			{
				return (false);
			}
			continue;
		}
		if (rc == 0)
		{
			return (false);
		}
		buffer[rc] = '\0';
		buff += buffer;
		if (buff.find_first_of("\r\n") != std::string::npos)
		{
			size_t pos = buff.find_last_of("\r\n");
			buff = buff.substr(0, pos);
			if (!checkCode(fd, buff))
				return (false);
			return (true);
		}
		else
		{
			return (true);
		}
	} while (true);
	return (true);
}

